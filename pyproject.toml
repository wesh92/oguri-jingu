[tool.black]
line-length = 124
target-version = ['py311', 'py312']

[tool.ruff]
extend-select = ["ANN2",
    "ANN401",
    "C4",
    "SIM",
    "B",
    "BLE",
    "ERA",
    "I",
    "ICN",
    "ISC",
    "N",
    "PGH",
    "PIE",
    "RET501",
    "RET502",
    "RET503",
    "RSE",
    "RUF",
    "S",
    "T20",
    "TID",
    "YTT",
    "W",
    "UP",
    "C90",
    "PD"]
ignore = [
    "E402", # Module level import not at top of file (module-import-not-at-top-of-file)
    "B905", # zip() without an explicit strict= parameter (zip-without-explicit-strict)
    "N818", # Exception name {name} should be named with an Error suffix (error-suffix-on-exception-name)
    "S101", # Use of assert detected (assert)
    "SIM103", # Return the condition {condition} directly (needless-bool)
    "B008", # Do not perform function call {name} in argument defaults (function-call-in-default-argument)
    "PD003", # .isna is preferred to .isnull; functionality is equivalent (pandas-use-of-dot-is-null)
    "PD004", # .notna is preferred to .notnull; functionality is equivalent (pandas-use-of-dot-not-null)=
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "SIM116", # Use a dictionary instead of consecutive if statements
    ]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "legacy/*"
]
show-fixes = true
target-version = "py311"
line-length = 124
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator"]

[tool.poetry]
name = "oguri-jingu"
version = "0.1.2"
description = "FOSS Toolset and Utilities (+web?) for Uma Musume"
authors = ["Wes Hahn <52631646+wesh92@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11, <4.0"
black = "^23.12.1"
pre-commit = "^3.6.0"
ruff = "^0.1.11"
polars = "^0.20.3"
pydantic = "^2.5.3"
SQLAlchemy = "^2.0.25"
pandas = "^2.1.4"
toml = "^0.10.2"
unitypy = "^1.10.7"
supabase = "^2.3.4"
psycopg2-binary = "^2.9.9"
pyarrow = ">=8"
typer = {extras = ["all"], version = "^0.9.0"}
tomli = "^2.0.1"
tomli-w = "^1.0.0"
langdetect = "^1.0.9"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
